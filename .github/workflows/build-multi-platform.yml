name: Build and Release Executables

on:
    push:
        branches:
            - main
    workflow_dispatch:
        inputs:
            version:
                description: "v0.0.1"
                required: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install the project dependencies
        run: uv sync


      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: D:\a\_temp\setup-uv-cache
          key: ${{ runner.os }}-uv-packages-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-packages-

      - name: Cache PyInstaller bootloader build
        id: cache-bootloader
        uses: actions/cache@v4
        with:
          path: pyinstaller/bootloader/build
          key: ${{ runner.os }}-pyinstaller-bootloader-${{ matrix.python-version }}-${{ hashFiles('pyinstaller/bootloader/waf') }}


      - name: Build application
        run: |
          python -m pip install --upgrade pip pyinstaller setuptools build wheel pywin32-ctypes
          python -m PyInstaller --onefile src/app.py

      - name: Rename executable
        run: |
            if ($env:RUNNER_OS -eq 'Windows') {
              Rename-Item dist/app.exe dist/ocr-reader-windows.exe
            } elseif ($env:RUNNER_OS -eq 'Linux') {
              mv dist/app dist/ocr-reader-linux
            } elseif ($env:RUNNER_OS -eq 'macOS') {
              mv dist/app dist/ocr-reader-macos
            }

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ocr-reader-${{ matrix.os }}
          path: dist/*